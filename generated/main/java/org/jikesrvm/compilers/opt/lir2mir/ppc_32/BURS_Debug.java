package org.jikesrvm.compilers.opt.lir2mir.ppc_32; 
public class BURS_Debug {
  /** For a given rule number the string version of the rule it corresponds to */
  public static final String[] string = {
    /* 0 */ null,
    /* 1 */"stm: r",
    /* 2 */"r: czr",
    /* 3 */"r: rs",
    /* 4 */"r: rz",
    /* 5 */"rs: rp",
    /* 6 */"rz: rp",
    /* 7 */"any: r",
    /* 8 */"r: REGISTER",
    /* 9 */"any: NULL",
    /* 10 */"any: ADDRESS_CONSTANT",
    /* 11 */"any: INT_CONSTANT",
    /* 12 */"any: LONG_CONSTANT",
    /* 13 */"stm: RESOLVE",
    /* 14 */"stm: IG_PATCH_POINT",
    /* 15 */"stm: UNINT_BEGIN",
    /* 16 */"stm: UNINT_END",
    /* 17 */"stm: YIELDPOINT_PROLOGUE",
    /* 18 */"stm: YIELDPOINT_EPILOGUE",
    /* 19 */"stm: YIELDPOINT_BACKEDGE",
    /* 20 */"r: FRAMESIZE",
    /* 21 */"stm: NOP",
    /* 22 */"r: GUARD_MOVE",
    /* 23 */"r: GUARD_COMBINE",
    /* 24 */"r: GET_CAUGHT_EXCEPTION",
    /* 25 */"stm: FENCE",
    /* 26 */"stm: WRITE_FLOOR",
    /* 27 */"stm: READ_CEILING",
    /* 28 */"stm: ILLEGAL_INSTRUCTION",
    /* 29 */"stm: TRAP",
    /* 30 */"rs: REF_MOVE(INT_CONSTANT)",
    /* 31 */"rs: REF_MOVE(INT_CONSTANT)",
    /* 32 */"rs: REF_MOVE(INT_CONSTANT)",
    /* 33 */"stm: GOTO",
    /* 34 */"stm: RETURN(NULL)",
    /* 35 */"r: GET_TIME_BASE",
    /* 36 */"stm: IR_PROLOGUE",
    /* 37 */"r: LONG_MOVE(LONG_CONSTANT)",
    /* 38 */"r: REF_MOVE(ADDRESS_CONSTANT)",
    /* 39 */"r: REF_MOVE(ADDRESS_CONSTANT)",
    /* 40 */"r: REF_MOVE(ADDRESS_CONSTANT)",
    /* 41 */"any: OTHER_OPERAND(any,any)",
    /* 42 */"stm: TRAP_IF(r,r)",
    /* 43 */"r: BOOLEAN_CMP_INT(r,r)",
    /* 44 */"boolcmp: BOOLEAN_CMP_INT(r,r)",
    /* 45 */"r: BOOLEAN_CMP_ADDR(r,r)",
    /* 46 */"boolcmp: BOOLEAN_CMP_ADDR(r,r)",
    /* 47 */"r: REF_ADD(r,r)",
    /* 48 */"r: REF_SUB(r,r)",
    /* 49 */"r: INT_MUL(r,r)",
    /* 50 */"r: INT_DIV(r,r)",
    /* 51 */"r: INT_REM(r,r)",
    /* 52 */"rz: INT_SHL(r,r)",
    /* 53 */"rs: INT_SHR(r,r)",
    /* 54 */"rz: INT_USHR(r,r)",
    /* 55 */"r: REF_AND(r,r)",
    /* 56 */"r: REF_OR(r,r)",
    /* 57 */"r: REF_XOR(r,r)",
    /* 58 */"r: FLOAT_ADD(r,r)",
    /* 59 */"r: DOUBLE_ADD(r,r)",
    /* 60 */"r: FLOAT_MUL(r,r)",
    /* 61 */"r: DOUBLE_MUL(r,r)",
    /* 62 */"r: FLOAT_SUB(r,r)",
    /* 63 */"r: DOUBLE_SUB(r,r)",
    /* 64 */"r: FLOAT_DIV(r,r)",
    /* 65 */"r: DOUBLE_DIV(r,r)",
    /* 66 */"rs: BYTE_LOAD(r,r)",
    /* 67 */"rp: UBYTE_LOAD(r,r)",
    /* 68 */"rs: SHORT_LOAD(r,r)",
    /* 69 */"rp: USHORT_LOAD(r,r)",
    /* 70 */"r: FLOAT_LOAD(r,r)",
    /* 71 */"r: DOUBLE_LOAD(r,r)",
    /* 72 */"rs: INT_LOAD(r,r)",
    /* 73 */"stm: INT_IFCMP(r,r)",
    /* 74 */"stm: INT_IFCMP2(r,r)",
    /* 75 */"stm: FLOAT_IFCMP(r,r)",
    /* 76 */"stm: DOUBLE_IFCMP(r,r)",
    /* 77 */"stm: FLOAT_CMPL(r,r)",
    /* 78 */"stm: FLOAT_CMPG(r,r)",
    /* 79 */"stm: DOUBLE_CMPL(r,r)",
    /* 80 */"stm: DOUBLE_CMPG(r,r)",
    /* 81 */"r: CALL(r,any)",
    /* 82 */"r: SYSCALL(r,any)",
    /* 83 */"r: OTHER_OPERAND(r,r)",
    /* 84 */"r: YIELDPOINT_OSR(any,any)",
    /* 85 */"r: PREPARE_INT(r,r)",
    /* 86 */"r: PREPARE_LONG(r,r)",
    /* 87 */"r: ATTEMPT_INT(r,r)",
    /* 88 */"r: ATTEMPT_LONG(r,r)",
    /* 89 */"r: LONG_ADD(r,r)",
    /* 90 */"r: LONG_SUB(r,r)",
    /* 91 */"r: LONG_MUL(r,r)",
    /* 92 */"r: LONG_SHL(r,r)",
    /* 93 */"r: LONG_SHR(r,r)",
    /* 94 */"r: LONG_USHR(r,r)",
    /* 95 */"r: LONG_AND(r,r)",
    /* 96 */"r: LONG_OR(r,r)",
    /* 97 */"r: LONG_XOR(r,r)",
    /* 98 */"stm: LONG_CMP(r,r)",
    /* 99 */"stm: LONG_IFCMP(r,r)",
    /* 100 */"r: LONG_LOAD(r,r)",
    /* 101 */"r: PREPARE_ADDR(r,r)",
    /* 102 */"r: ATTEMPT_ADDR(r,r)",
    /* 103 */"stm: LOWTABLESWITCH(r)",
    /* 104 */"stm: NULL_CHECK(r)",
    /* 105 */"stm: SET_CAUGHT_EXCEPTION(r)",
    /* 106 */"stm: DCBF(r)",
    /* 107 */"stm: DCBST(r)",
    /* 108 */"stm: DCBT(r)",
    /* 109 */"stm: DCBTST(r)",
    /* 110 */"stm: DCBZ(r)",
    /* 111 */"stm: DCBZL(r)",
    /* 112 */"stm: ICBI(r)",
    /* 113 */"stm: TRAP_IF(r,INT_CONSTANT)",
    /* 114 */"stm: TRAP_IF(r,LONG_CONSTANT)",
    /* 115 */"r: BOOLEAN_NOT(r)",
    /* 116 */"r: BOOLEAN_CMP_INT(r,INT_CONSTANT)",
    /* 117 */"boolcmp: BOOLEAN_CMP_INT(r,INT_CONSTANT)",
    /* 118 */"r: BOOLEAN_CMP_ADDR(r,INT_CONSTANT)",
    /* 119 */"boolcmp: BOOLEAN_CMP_ADDR(r,INT_CONSTANT)",
    /* 120 */"boolcmp: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",
    /* 121 */"boolcmp: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",
    /* 122 */"boolcmp: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",
    /* 123 */"boolcmp: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",
    /* 124 */"r: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",
    /* 125 */"r: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",
    /* 126 */"r: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",
    /* 127 */"r: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",
    /* 128 */"r: REF_ADD(r,INT_CONSTANT)",
    /* 129 */"r: REF_ADD(r,REF_MOVE(INT_CONSTANT))",
    /* 130 */"r: REF_ADD(r,REF_MOVE(INT_CONSTANT))",
    /* 131 */"r: INT_MUL(r,INT_CONSTANT)",
    /* 132 */"r: INT_DIV(r,REF_MOVE(INT_CONSTANT))",
    /* 133 */"r: INT_REM(r,REF_MOVE(INT_CONSTANT))",
    /* 134 */"r: REF_NEG(r)",
    /* 135 */"rz: INT_SHL(r,INT_CONSTANT)",
    /* 136 */"rs: INT_SHR(r,INT_CONSTANT)",
    /* 137 */"rp: INT_USHR(r,INT_CONSTANT)",
    /* 138 */"czr: REF_AND(r,INT_CONSTANT)",
    /* 139 */"rp: REF_AND(r,INT_CONSTANT)",
    /* 140 */"r: REF_OR(r,INT_CONSTANT)",
    /* 141 */"r: REF_XOR(r,INT_CONSTANT)",
    /* 142 */"r: REF_NOT(r)",
    /* 143 */"r: FLOAT_NEG(r)",
    /* 144 */"r: DOUBLE_NEG(r)",
    /* 145 */"r: FLOAT_SQRT(r)",
    /* 146 */"r: DOUBLE_SQRT(r)",
    /* 147 */"rs: INT_2BYTE(r)",
    /* 148 */"rp: INT_2USHORT(r)",
    /* 149 */"rs: INT_2SHORT(r)",
    /* 150 */"r: INT_2FLOAT(r)",
    /* 151 */"r: INT_2DOUBLE(r)",
    /* 152 */"r: FLOAT_2INT(r)",
    /* 153 */"r: FLOAT_2DOUBLE(r)",
    /* 154 */"r: DOUBLE_2INT(r)",
    /* 155 */"r: DOUBLE_2FLOAT(r)",
    /* 156 */"r: FLOAT_AS_INT_BITS(r)",
    /* 157 */"r: INT_BITS_AS_FLOAT(r)",
    /* 158 */"r: REF_MOVE(r)",
    /* 159 */"r: FLOAT_MOVE(r)",
    /* 160 */"r: DOUBLE_MOVE(r)",
    /* 161 */"rs: BYTE_LOAD(r,INT_CONSTANT)",
    /* 162 */"rp: UBYTE_LOAD(r,INT_CONSTANT)",
    /* 163 */"rs: SHORT_LOAD(r,INT_CONSTANT)",
    /* 164 */"rp: USHORT_LOAD(r,INT_CONSTANT)",
    /* 165 */"r: FLOAT_LOAD(r,INT_CONSTANT)",
    /* 166 */"r: FLOAT_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))",
    /* 167 */"r: DOUBLE_LOAD(r,INT_CONSTANT)",
    /* 168 */"r: DOUBLE_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))",
    /* 169 */"rs: INT_LOAD(r,INT_CONSTANT)",
    /* 170 */"rs: INT_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))",
    /* 171 */"stm: INT_IFCMP(r,INT_CONSTANT)",
    /* 172 */"stm: INT_IFCMP(boolcmp,INT_CONSTANT)",
    /* 173 */"stm: INT_IFCMP(boolcmp,INT_CONSTANT)",
    /* 174 */"stm: INT_IFCMP(boolcmp,INT_CONSTANT)",
    /* 175 */"stm: INT_IFCMP(boolcmp,INT_CONSTANT)",
    /* 176 */"stm: INT_IFCMP2(r,INT_CONSTANT)",
    /* 177 */"stm: RETURN(r)",
    /* 178 */"r: LONG_NEG(r)",
    /* 179 */"r: LONG_SHL(r,INT_CONSTANT)",
    /* 180 */"r: LONG_SHR(r,INT_CONSTANT)",
    /* 181 */"r: LONG_USHR(r,INT_CONSTANT)",
    /* 182 */"r: LONG_NOT(r)",
    /* 183 */"r: INT_2LONG(r)",
    /* 184 */"r: LONG_2INT(r)",
    /* 185 */"r: DOUBLE_AS_LONG_BITS(r)",
    /* 186 */"r: LONG_BITS_AS_DOUBLE(r)",
    /* 187 */"r: LONG_MOVE(r)",
    /* 188 */"czr: REF_AND(r,REF_MOVE(INT_CONSTANT))",
    /* 189 */"r: REF_AND(r,REF_MOVE(INT_CONSTANT))",
    /* 190 */"r: REF_OR(r,REF_MOVE(INT_CONSTANT))",
    /* 191 */"r: REF_OR(r,REF_MOVE(INT_CONSTANT))",
    /* 192 */"r: REF_XOR(r,REF_MOVE(INT_CONSTANT))",
    /* 193 */"r: LONG_LOAD(r,INT_CONSTANT)",
    /* 194 */"r: LONG_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))",
    /* 195 */"r: REF_SUB(INT_CONSTANT,r)",
    /* 196 */"r: CALL(BRANCH_TARGET,any)",
    /* 197 */"rz: INT_SHL(INT_USHR(r,INT_CONSTANT),INT_CONSTANT)",
    /* 198 */"rp: INT_SHR(REF_AND(r,INT_CONSTANT),INT_CONSTANT)",
    /* 199 */"rp: INT_USHR(REF_AND(r,INT_CONSTANT),INT_CONSTANT)",
    /* 200 */"rp: INT_USHR(REF_AND(r,REF_MOVE(INT_CONSTANT)),INT_CONSTANT)",
    /* 201 */"rp: INT_USHR(INT_SHL(r,INT_CONSTANT),INT_CONSTANT)",
    /* 202 */"rp: REF_AND(INT_USHR(r,INT_CONSTANT),INT_CONSTANT)",
    /* 203 */"rp: REF_AND(INT_USHR(r,INT_CONSTANT),REF_MOVE(INT_CONSTANT))",
    /* 204 */"rp: REF_AND(BYTE_LOAD(r,INT_CONSTANT),INT_CONSTANT)",
    /* 205 */"rs: INT_LOAD(REF_ADD(r,INT_CONSTANT),INT_CONSTANT)",
    /* 206 */"stm: INT_IFCMP(INT_2BYTE(r),INT_CONSTANT)",
    /* 207 */"stm: INT_IFCMP(INT_2SHORT(r),INT_CONSTANT)",
    /* 208 */"stm: INT_IFCMP(INT_USHR(r,INT_CONSTANT),INT_CONSTANT)",
    /* 209 */"stm: INT_IFCMP(INT_SHL(r,INT_CONSTANT),INT_CONSTANT)",
    /* 210 */"stm: INT_IFCMP(INT_SHR(r,INT_CONSTANT),INT_CONSTANT)",
    /* 211 */"stm: INT_IFCMP(REF_AND(r,INT_CONSTANT),INT_CONSTANT)",
    /* 212 */"stm: INT_IFCMP(REF_NEG(r),INT_CONSTANT)",
    /* 213 */"stm: INT_IFCMP(REF_NOT(r),INT_CONSTANT)",
    /* 214 */"stm: INT_IFCMP(REF_AND(r,REF_MOVE(INT_CONSTANT)),INT_CONSTANT)",
    /* 215 */"stm: INT_IFCMP(REF_AND(r,REF_MOVE(INT_CONSTANT)),INT_CONSTANT)",
    /* 216 */"stm: INT_IFCMP(REF_ADD(r,INT_CONSTANT),INT_CONSTANT)",
    /* 217 */"r: REF_AND(REF_NOT(r),REF_NOT(r))",
    /* 218 */"r: REF_OR(REF_NOT(r),REF_NOT(r))",
    /* 219 */"stm: BYTE_STORE(INT_2BYTE(r),OTHER_OPERAND(r,INT_CONSTANT))",
    /* 220 */"stm: SHORT_STORE(INT_2SHORT(r),OTHER_OPERAND(r,INT_CONSTANT))",
    /* 221 */"stm: SHORT_STORE(INT_2USHORT(r),OTHER_OPERAND(r,INT_CONSTANT))",
    /* 222 */"r: REF_AND(r,REF_NOT(r))",
    /* 223 */"r: REF_OR(r,REF_NOT(r))",
    /* 224 */"stm: BYTE_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",
    /* 225 */"stm: SHORT_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",
    /* 226 */"stm: INT_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",
    /* 227 */"stm: INT_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))",
    /* 228 */"stm: FLOAT_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",
    /* 229 */"stm: FLOAT_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))",
    /* 230 */"stm: DOUBLE_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",
    /* 231 */"stm: DOUBLE_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))",
    /* 232 */"stm: LONG_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",
    /* 233 */"stm: LONG_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))",
    /* 234 */"r: REF_NOT(REF_OR(r,r))",
    /* 235 */"r: REF_NOT(REF_AND(r,r))",
    /* 236 */"r: REF_NOT(REF_XOR(r,r))",
    /* 237 */"rp: REF_AND(BYTE_LOAD(r,r),INT_CONSTANT)",
    /* 238 */"rs: INT_LOAD(REF_ADD(r,r),INT_CONSTANT)",
    /* 239 */"stm: INT_IFCMP(INT_USHR(r,r),INT_CONSTANT)",
    /* 240 */"stm: INT_IFCMP(INT_SHL(r,r),INT_CONSTANT)",
    /* 241 */"stm: INT_IFCMP(INT_SHR(r,r),INT_CONSTANT)",
    /* 242 */"stm: INT_IFCMP(ATTEMPT_INT(r,r),INT_CONSTANT)",
    /* 243 */"stm: INT_IFCMP(ATTEMPT_ADDR(r,r),INT_CONSTANT)",
    /* 244 */"stm: INT_IFCMP(REF_ADD(r,r),INT_CONSTANT)",
    /* 245 */"stm: INT_IFCMP(REF_AND(r,r),INT_CONSTANT)",
    /* 246 */"stm: INT_IFCMP(REF_OR(r,r),INT_CONSTANT)",
    /* 247 */"stm: INT_IFCMP(REF_XOR(r,r),INT_CONSTANT)",
    /* 248 */"r: FLOAT_ADD(FLOAT_MUL(r,r),r)",
    /* 249 */"r: DOUBLE_ADD(DOUBLE_MUL(r,r),r)",
    /* 250 */"r: FLOAT_SUB(FLOAT_MUL(r,r),r)",
    /* 251 */"r: DOUBLE_SUB(DOUBLE_MUL(r,r),r)",
    /* 252 */"r: FLOAT_ADD(r,FLOAT_MUL(r,r))",
    /* 253 */"r: DOUBLE_ADD(r,DOUBLE_MUL(r,r))",
    /* 254 */"stm: BYTE_STORE(r,OTHER_OPERAND(r,r))",
    /* 255 */"stm: SHORT_STORE(r,OTHER_OPERAND(r,r))",
    /* 256 */"stm: INT_STORE(r,OTHER_OPERAND(r,r))",
    /* 257 */"stm: FLOAT_STORE(r,OTHER_OPERAND(r,r))",
    /* 258 */"stm: DOUBLE_STORE(r,OTHER_OPERAND(r,r))",
    /* 259 */"stm: LONG_STORE(r,OTHER_OPERAND(r,r))",
    /* 260 */"r: FLOAT_NEG(FLOAT_ADD(FLOAT_MUL(r,r),r))",
    /* 261 */"r: DOUBLE_NEG(DOUBLE_ADD(DOUBLE_MUL(r,r),r))",
    /* 262 */"r: FLOAT_NEG(FLOAT_SUB(FLOAT_MUL(r,r),r))",
    /* 263 */"r: DOUBLE_NEG(DOUBLE_SUB(DOUBLE_MUL(r,r),r))",
    /* 264 */"r: FLOAT_NEG(FLOAT_ADD(r,FLOAT_MUL(r,r)))",
    /* 265 */"r: DOUBLE_NEG(DOUBLE_ADD(r,DOUBLE_MUL(r,r)))",
    /* 266 */"stm: BYTE_STORE(INT_2BYTE(r),OTHER_OPERAND(r,r))",
    /* 267 */"stm: SHORT_STORE(INT_2SHORT(r),OTHER_OPERAND(r,r))",
    /* 268 */"stm: SHORT_STORE(INT_2USHORT(r),OTHER_OPERAND(r,r))",
    /* 269 */"stm: INT_STORE(r,OTHER_OPERAND(REF_ADD(r,INT_CONSTANT),INT_CONSTANT))",
    /* 270 */"stm: INT_IFCMP(REF_AND(r,REF_NOT(r)),INT_CONSTANT)",
    /* 271 */"stm: INT_IFCMP(REF_OR(r,REF_NOT(r)),INT_CONSTANT)",
  };

}
